'scopeName': 'text.html.php.blade'
'name': 'Blade'
'fileTypes': [
  '.blade.php'
]
'foldingStartMarker': '(/\\*|\\{\\s*$|<<<HTML)'
'foldingStopMarker': '(\\*/|^\\s*\\}|^HTML;)'
'injections':
  'text.html.php.blade - (meta.embedded | meta.tag | comment.block.blade), L:(text.html.php.blade meta.tag - (comment.block.blade | meta.embedded.block.blade)), L:(source.js.embedded.html - (comment.block.blade | meta.embedded.block.blade))':
    'patterns': [
      {
        # Comments
        'begin': '{{--'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.blade'
        'end': '--}}'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.blade'
        'name': 'comment.block.blade'
        # If we see a PHP tag inside the comment, we have to warn user that their comment is not processed correctly.
        # We can't back out of our commitment to use comment, so highlighting it differently is the best option.
        'patterns': [
          {
            'begin': '(?=<\\?)'
            'end': '(?<=\\?>)'
            'name': 'invalid.illegal.php-code-in-comment.blade'
            'patterns': [
              {
                'include': '#php-tag'
              }
            ]
          }
        ]
      }
      {
        'match': '@(?={{{|{{|{!!|@\\w+(?:::\\w+)?)'
        'name': 'comment.blade'
      }
      {
        # Escaped echos
        # Escaped if preceded by @
        'begin': '(?<!@){{{'
        'beginCaptures':
          '0':
            'name': 'support.function.construct.begin.blade'
        'contentName': 'source.php'
        'end': '(})}}'
        'endCaptures':
          '0':
            'name': 'support.function.construct.end.blade'
          # HACK to properly trigger autocomplete if content is zero-width
          '1':
            'name': 'source.php'
        'name': 'meta.function.echo.blade'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
      {
        # Regular echos
        # Escaped if preceded by @
        'begin': '(?<![@{]){{'
        'beginCaptures':
          '0':
            'name': 'support.function.construct.begin.blade'
        'contentName': 'source.php'
        'end': '(})}'
        'endCaptures':
          '0':
            'name': 'support.function.construct.end.blade'
          # HACK to properly trigger autocomplete if content is zero-width
          '1':
            'name': 'source.php'
        'name': 'meta.function.echo.blade'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
      {
        # Raw echos
        # Escaped if preceded by @
        'begin': '(?<!@){!!'
        'beginCaptures':
          '0':
            'name': 'support.function.construct.begin.blade'
        'contentName': 'source.php'
        'end': '(!)!}'
        'endCaptures':
          '0':
            'name': 'support.function.construct.end.blade'
          # HACK to properly trigger autocomplete if content is zero-width
          '1':
            'name': 'source.php'
        'name': 'meta.function.echo.blade'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
      {
        # Built in directives that take additional arguments
        'begin': '''(?x)
                  (?<![A-Za-z0-9_@]) # Prepended @ or literal character escapes the sequence
                  (
                    @
                    (?i: # Ordering not important as we everything will be matched up to opening parentheses
                     auth
                    |break
                    |can
                    |canany
                    |cannot
                    |case
                    |choice
                    |component
                    |componentfirst
                    |continue
                    |dd
                    |dump
                    |each
                    |elseauth
                    |elsecan
                    |elsecanany
                    |elsecannot
                    |elseguest
                    |elseif
                    |empty
                    |error
                    |extends
                    |for
                    |foreach
                    |forelse
                    |guest
                    |hassection
                    |if
                    |include
                    |includefirst
                    |includeif
                    |includeunless
                    |includewhen
                    |inject
                    |isset
                    |json
                    |lang
                    |method
                    |php
                    |prepend
                    |push
                    |section
                    |slot
                    |stack
                    |switch
                    |unless
                    |unset
                    |while
                    |yield
                    )
                    [\\t ]* # Whitespace between name and parentheses
                  )
                  (\\() # Followed by opening parentheses'''
        'beginCaptures':
          '1':
            'name': 'keyword.blade'
          '2':
            'name': 'begin.bracket.round.blade.php'
        'contentName': 'source.php'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'end.bracket.round.blade.php'
        'name': 'meta.directive.blade'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
      {
        # Built in directives that do not take any arguments, but it's not forbidden and we should show that it does nothing (as good as commenting out)
        'begin': '''(?x)
                  (?<![A-Za-z0-9_@]) # Prepended @ or literal character escapes the sequence
                  (
                    @
                    (?i: # Ordering not important as we everything will be matched up to opening parentheses
                     append
                    |csrf
                    |default
                    |else
                    |endauth
                    |endcan
                    |endcanany
                    |endcannot
                    |endcomponent
                    |endcomponentfirst
                    |endempty
                    |enderror
                    |endfor
                    |endforeach
                    |endforelse
                    |endguest
                    |endif
                    |endisset
                    |endlang
                    |endprepend
                    |endpush
                    |endsection
                    |endslot
                    |endswitch
                    |endunless
                    |endwhile
                    |overwrite
                    |parent
                    |show
                    |stop
                    )
                    [\\t ]* # Whitespace between name and parentheses
                  )
                  (\\() # Followed by opening parentheses'''
        'beginCaptures':
          '1':
            'name': 'keyword.blade'
          '2':
            'name': 'begin.bracket.round.blade.php'
        'contentName': 'comment.blade'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'end.bracket.round.blade.php'
        'name': 'meta.directive.blade'
        'patterns': [
          {
            'include': '#balance_brackets'
          }
        ]
      }
      {
        # Built in directives that accept not taking any arguments
        'match': '''(?x)
                  (?<![A-Za-z0-9_@]) # Prepended @ or literal character escapes the sequence
                  @
                  (?: # Ordering not important as we everything will be matched up to word boundary
                   (?i)append
                  |(?i)auth
                  |(?i)break
                  |(?i)continue
                  |(?i)csrf
                  |(?i)default
                  |(?i)else
                  |(?i)elseauth
                  |(?i)elseguest
                  |(?i)empty
                  |(?i)endauth
                  |(?i)endcan
                  |(?i)endcanany
                  |(?i)endcannot
                  |(?i)endcomponent
                  |(?i)endcomponentfirst
                  |(?i)endempty
                  |(?i)enderror
                  |(?i)endfor
                  |(?i)endforeach
                  |(?i)endforelse
                  |(?i)endguest
                  |(?i)endif
                  |(?i)endisset
                  |(?i)endlang
                  |(?i)endprepend
                  |(?i)endpush
                  |(?i)endsection
                  |(?i)endslot
                  |(?i)endswitch
                  |(?i)endunless
                  |endverbatim
                  |(?i)endwhile
                  |(?i)guest
                  |(?i)lang
                  |(?i)overwrite
                  |(?i)parent
                  |(?i)show
                  |(?i)stop
                  |verbatim
                  )
                  \\b'''
        'name': 'keyword.blade'
      }
      {
        # Embedded PHP code block
        'begin': '(?<![A-Za-z0-9_@])@(?i:php)\\b' # Prepended @ or literal character escapes the sequence
        'end': '(?<![A-Za-z0-9_@])(?=@(?i:endphp)\\b)' # Prepended @ or literal character escapes the sequence
        'beginCaptures':
          '0':
            'name': 'keyword.begin.blade'
        'endCaptures':
          '0':
            'name': 'keyword.end.blade'
        'contentName': 'source.php'
        'name': 'meta.embedded.block.blade'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
      {
        'begin': '''(?x)
                  (?<![A-Za-z0-9_@]) # Prepended @ or literal character escapes the sequence
                  (
                    @
                    (?i:
                      endphp
                    )
                    [\\t ]* # Whitespace between name and parentheses
                  )
                  (\\() # Followed by opening parentheses'''
        'beginCaptures':
          '1':
            'name': 'keyword.end.blade'
          '2':
            'name': 'begin.bracket.round.blade.php'
        'contentName': 'comment.blade'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'end.bracket.round.blade.php'
        'name': 'meta.directive.blade'
        'patterns': [
          {
            'include': '#balance_brackets'
          }
        ]
      }
      {
        'match': '''(?x)
                  (?<![A-Za-z0-9_@]) # Prepended @ or literal character escapes the sequence
                  @
                  (?: # Ordering not important as we everything will be matched up to word boundary
                   (?i)endphp
                  )
                  \\b'''
        'name': 'keyword.end.blade'
      }
      # Custom directives
      {
        # With arguments
        'begin': '''(?x)
                  (?<![A-Za-z0-9_@]) # Prepended @ or literal character escapes the sequence
                  (
                    @
                    \\w+(?:::\\w+)? # Any number/letter sequence, can also be postfixed by ::someOtherString
                    [\\t ]* # Whitespace between name and parentheses
                  )
                  (\\() # Followed by opening parentheses'''
        'beginCaptures':
          '1':
            'name': 'entity.name.function.blade'
          '2':
            'name': 'begin.bracket.round.blade.php'
        'contentName': 'source.php'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'end.bracket.round.blade.php'
        'name': 'meta.directive.custom.blade'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
      {
        # Without arguments
        'match': '''(?x)
                  (?<![A-Za-z0-9_@]) # Prepended @ or literal character escapes the sequence
                  @
                  \\w+(?:::\\w+)? # Any number/letter sequence, can also be postfixed by ::someOtherString
                  \\b # Bounded by word boundary'''
        'name': 'entity.name.function.blade'
      }
      {
        'include': '#php-tag'
      }
    ]
'patterns': [
  {
    'begin': '\\A#!'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.php'
    'end': '$'
    'name': 'comment.line.shebang.php'
  }
  {
    'include': 'text.html.basic'
  }
]
'repository':
  'balance_brackets':
    'patterns': [
      {
        'begin': '\\('
        'end': '\\)'
        'patterns': [
          'include': '#balance_brackets'
        ]
      }
      {
        'match': '[^()]+'
      }
    ]
  'php-tag':
    'patterns': [
      {
        'begin': '<\\?(?i:php|=)?(?![^?]*\\?>)'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.embedded.begin.php'
        'end': '(\\?)>'
        'endCaptures':
          '0':
            'name': 'punctuation.section.embedded.end.php'
          '1':
            'name': 'source.php'
        'name': 'meta.embedded.block.php'
        'contentName': 'source.php'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
      {
        'begin': '<\\?(?i:php|=)?'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.embedded.begin.php'
        'end': '(\\?)>'
        'endCaptures':
          '0':
            'name': 'punctuation.section.embedded.end.php'
          '1':
            'name': 'source.php'
        'name': 'meta.embedded.line.php'
        'contentName': 'source.php'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
    ]
